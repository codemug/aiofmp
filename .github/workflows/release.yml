name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run linting
        run: |
          uv run ruff check . --no-fix
          uv run ruff format --check .

      - name: Run critical tests
        run: |
          uv run pytest tests/test_mcp_server.py tests/test_mcp_tools.py -v --tb=short

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: quick-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies (with dev)
        run: |
          uv sync --dev

      - name: Release diagnostics
        run: |
          echo "Existing tags:" && git tag --list | sort -V || true
          echo "Last 15 commits (on main):" && git --no-pager log --oneline -15 || true
          echo "Conventional-looking commits since last tag:" && {
            last_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo '')
            if [ -n "$last_tag" ]; then
              git log --oneline ${last_tag}..HEAD | grep -E '^(feat|fix|perf|refactor|docs|test|chore)(\(|:)' || echo "(none)"
            else
              echo "(no tag yet)"
            fi
          }

      - name: Run python-semantic-release (publish)
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # python-semantic-release expects PYPI token in environment variable named PYPI_API_TOKEN or configured in pyproject
          set -e
          echo "Diagnostic: token env variables present?";
          for v in PYPI_API_TOKEN PYPI_TOKEN GITHUB_TOKEN; do
            if [ -n "${!v}" ]; then echo "$v length: ${#GITHUB_TOKEN}" | sed 's/./*/g' >/dev/null; fi
          done
          if [ -z "${PYPI_API_TOKEN}" ]; then echo "PYPI_API_TOKEN is empty" >&2; fi
          if ! uv run semantic-release --version >/dev/null 2>&1; then
            echo "semantic-release entrypoint not found; attempting module invocation" >&2
          fi
          # Prefer module form to avoid missing console script edge cases
          uv run python -m semantic_release publish
          # After a successful publish, if pyproject still uses commit version_source, switch to tag for subsequent releases.
          if grep -q 'version_source = "commit"' pyproject.toml; then
            echo "Switching version_source back to 'tag' for subsequent runs";
            sed -i.bak 's/version_source = "commit"/version_source = "tag"/' pyproject.toml
            rm -f pyproject.toml.bak
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git add pyproject.toml
            git commit -m "chore: switch semantic-release version_source to tag post-bootstrap [skip ci]" || echo "No changes to commit"
            git push origin HEAD:main || echo "Push skipped"
          fi

  tag-release:
    name: Ensure GitHub Release for Tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check/Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          tag_name="${GITHUB_REF#refs/tags/}"
          echo "Processing tag: $tag_name"
          code=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/tags/${tag_name}")
          if [ "$code" = "200" ]; then
            echo "GitHub Release already exists for $tag_name; nothing to do."; exit 0
          fi
          echo "No existing release; creating one with generated notes.";
          # gh CLI is pre-installed on ubuntu-latest
          echo "Generating release..."
          gh release create "$tag_name" --generate-notes || {
            echo "Fallback: creating minimal release via API";
            curl -s -X POST \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
              -d "$(jq -n --arg tag "$tag_name" '{tag_name:$tag, name:$tag, body:"Automated release."}')" >/dev/null;
          }
          echo "Release ensured for $tag_name"
