name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  quick-test:
    name: Quick Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Run linting
        run: |
          uv run ruff check . --no-fix
          uv run ruff format --check .

      - name: Run critical tests
        run: |
          uv run pytest tests/test_mcp_server.py tests/test_mcp_tools.py -v --tb=short

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: quick-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies
        run: |
          uv sync --dev

      - name: Build package
        run: |
          uv build

      - name: Install Node.js dependencies
        run: npm install

      - name: Semantic Release
        id: semantic-release
        run: |
          output=$(npx semantic-release --dry-run=false 2>&1)
          echo "$output"
          if echo "$output" | grep -q "Published release"; then
            echo "new-release-published=true" >> $GITHUB_OUTPUT
          else
            echo "new-release-published=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        if: steps.semantic-release.outputs.new-release-published == 'true'
        run: |
          uv publish --token ${{ secrets.PYPI_API_TOKEN }}
